{"version":3,"sources":["components/form/Form.jsx","components/display/Display.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","state","cityName","changeCity","event","setState","target","value","handleSubmit","preventDefault","props","methodGetCity","this","methodShowTempMin","methodShowTempMax","shadow","undefined","className","onSubmit","type","placeholder","onChange","React","Component","Display","methodCityName","methodTempMin","methodTempMax","methodCityAlert","methodHumid","methodDescr","methodCountry","console","log","tempMin","tempMax","cityTemp","humidity","description","Math","round","App","name","condition","country","alert","gettingCityApi","a","fetch","dataApi","json","result","main","temp_min","temp_max","weather","sys","Date","getDay","getMonth","src","alt","currentMonth","getDate","toDay","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4bd3f0b9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./form.css\";\r\n\r\nexport default class Form extends React.Component {\r\n  state = { cityName: \"\" };\r\n\r\n  changeCity = event => {\r\n    this.setState({\r\n      cityName: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.methodGetCity(this.state.cityName);\r\n    this.setState({\r\n      cityName: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { methodShowTempMin, methodShowTempMax } = this.props;\r\n    let shadow = \"darkShadow\";\r\n    if (methodShowTempMin !== undefined || methodShowTempMax !== undefined) {\r\n      shadow = \"lightShadow\";\r\n    }\r\n\r\n    return (\r\n      <form className=\"Form mt-4\" onSubmit={this.handleSubmit}>\r\n        <div className=\"d-flex\">\r\n          <input\r\n            type=\"search\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search city\"\r\n            value={this.state.cityName}\r\n            onChange={this.changeCity}\r\n          />\r\n          <button type=\"submit\" className={shadow}>\r\n            Show weather\r\n          </button>\r\n        </div>\r\n        {/* <div className=\"manual mt-4\">\r\n          <p>Enter the name of the city in English !</p>\r\n        </div> */}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./display.css\";\r\n\r\nexport default class Display extends React.Component {\r\n  state = {};\r\n\r\n  render() {\r\n    const { methodCityName, methodTempMin, methodTempMax, methodCityAlert, methodHumid, methodDescr, methodCountry } = this.props;\r\n    console.log()\r\n    let tempMin = methodTempMin;\r\n    let tempMax = methodTempMax;\r\n    let cityTemp = \"cityTemp\";\r\n    let cityName = \"cityName\";\r\n    let humidity = \"humidity\";\r\n    let description = \"description\";\r\n\r\n    if (methodTempMin && methodTempMax ) {\r\n      tempMin = Math.round(methodTempMin);\r\n      tempMax = Math.round(methodTempMax);\r\n    } \r\n    if(methodTempMin < 0 || methodTempMax < 0) {\r\n      cityTemp += \" cityTempCold\";\r\n      cityName += \" shadowCold\";\r\n      humidity += \" shadowColdDown\";\r\n      description += \" shadowColdDown\";\r\n    }\r\n\r\n    return (\r\n      <div className=\"Display text-center\">\r\n        \r\n        {methodCityName &&\r\n          <div className=\"\">\r\n            <h1 className={cityName}>{methodCityName}, {methodCountry}</h1>\r\n            <h3 className={cityTemp}>{tempMin}/{tempMax}&deg;C</h3>\r\n            <div className={humidity}><span>humidity</span>: {methodHumid} %</div>\r\n            <div className={description}><span>condition</span>: {methodDescr}</div>\r\n          </div>\r\n        }\r\n        <p className=\"alert\">{methodCityAlert}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/form/Form\";\nimport Display from \"./components/display/Display\";\n\nexport default class App extends React.Component {\n  state = {\n    name: undefined,\n    tempMin: undefined,\n    tempMax: undefined,\n    condition: undefined,\n    description: undefined,\n    country: undefined,\n    humidity: undefined,\n    alert: undefined\n  };\n\n  gettingCityApi = async cityName => {\n    try {\n      const myApiKey = \"18acc07934ad7fa52e0c87730491e2dd\";\n      const dataApi = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${myApiKey}&units=metric`\n      );\n      const result = await dataApi.json();\n      console.log(result);\n      if (cityName) {\n        this.setState({\n          name: result.name,\n          tempMin: result.main.temp_min,\n          tempMax: result.main.temp_max,\n          condition: result.weather[0].main,\n          description: result.weather[0].description,\n          country: result.sys.country,\n          humidity: result.main.humidity,\n          alert: undefined\n        });\n      } else {\n        this.setState({\n          name: undefined,\n          tempMin: undefined,\n          tempMax: undefined,\n          condition: undefined,\n          description: undefined,\n          country: undefined,\n          humidity: undefined,\n          alert: \"Please, enter city name!\"\n        });\n      }\n    } catch (e) {\n      this.setState({\n        name: \"\",\n        tempMin: undefined,\n        tempMax: undefined,\n        condition: '',\n        description: '',\n        country: '',\n        humidity: '',\n        alert: \"Uncorrect city name!\"\n      });\n    }\n  };\n\n  toDay() {\n    const arrDays = ['Monday', 'Tuesday', 'Wednesday', 'Thurs', 'Friday', 'Saturday', 'Sunday'];\n    const date = new Date();\n    const day = date.getDay();\n    return arrDays[day - 1];\n  }\n\n  currentMonth() {\n    const arrMonth = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const date = new Date();\n    const month = date.getMonth();\n    return arrMonth[month];\n  }\n\n  componentDidMount() {\n    this.gettingCityApi(\"chuhuiv\");\n  }\n\n  render() {\n    const { name, tempMin, tempMax, alert, humidity, description, country, condition } = this.state;\n\n    let weather = \"App\";\n\n    switch (condition) {\n      case \"Clear\": weather = \"clearSky\";\n        break;\n      case \"Clouds\": weather = \"clouds\";\n        break;\n      case \"Rain\": weather = \"rain\";\n        break;\n      case \"Mist\": weather = \"mist\";\n        break;\n      case \"Snow\": weather = \"snow\";\n        break;\n      case \"Thunderstorm\": weather = \"flashLight\";\n        break;\n    }\n   \n    return (\n      <div className={weather}>\n        <div className=\"wrapper\">\n          <div className=\"container h-100\">\n            <div className=\"header w-100\">\n              <img\n                src=\"https://pcntv.com/wp-content/uploads/2015/09/WW-new-logo-test-2-300x177.png\"\n                alt=\"logo-weather\"\n              />\n              <Form methodGetCity={this.gettingCityApi} \n                    methodShowTempMin={tempMin}\n                    methodShowTempMax={tempMax}\n              />\n              <div className=\"totalDateTime\">\n                <div className=\"d1\">\n                  <span className=\"month\">{this.currentMonth()},</span> \n                  <span className=\"date\">{new Date().getDate()}</span>                                                  \n                </div>               \n                <div className=\"d2\">\n                  <span className=\"day\">{this.toDay()} </span>\n                  <span className=\"year\">{new Date().getFullYear()}</span>\n                </div>\n              </div>\n            </div>    \n            <div className=\"content d-flex justify-content-center align-items-center\">\n              <Display\n                methodCityName={name}\n                methodCountry={country}\n                methodTempMin={tempMin}\n                methodTempMax={tempMax}\n                methodCityAlert={alert}\n                methodHumid={humidity}\n                methodDescr={description}\n              />\n            </div>                    \n          </div>\n        </div>        \n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}